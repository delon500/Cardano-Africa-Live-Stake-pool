1) What is a Cardano node ?
	A Cardano node refers to a software component that participates in the Cardano blockchain network.
	Nodes are essential components of any blockchain network, including Cardano. 
	They are responsible for maintaining the distributed ledger, 
	validating transactions, and ensuring the security and integrity of the blockchain. 

2) Why Cardano node?
	The cardano-node is the top level for the node and aggregates the other components from other packages: 
	consensus, ledger and networking, with configuration, CLI, logging and monitoring.
	
	Decentralized Blockchain Infrastructure:
		The Cardano node contributes to the decentralization of the Cardano blockchain. 
		By running nodes across the globe, the network becomes more resistant to censorship and single points of failure.

	Consensus Mechanism:
		The node participates in the consensus mechanism of the Cardano blockchain. 
		Cardano currently uses the Ouroboros consensus algorithm, which relies on nodes reaching agreement on the state of the blockchain.
	
	Transaction Validation:
		The node is responsible for validating transactions. It checks that transactions adhere 
		to the rules of the Cardano protocol and ensures the security and integrity of the blockchain.
		
	Stake Pool Operations:
		Nodes are involved in the operation of stake pools. Stake pool operators run nodes to contribute to the network's 
		security and, in the case of block-producing nodes, to create new blocks.
	
3) Specifications for Hardware needed for Cardano Node
	
	Currently the following specifications are recommended on Mainnet:

		Servers: 1 for block producer node + at least 2 for relay nodes
		CPU: An Intel or AMD x86 processor with two or more cores at 2GHz or faster
		Memory: 24GB of RAM
		Storage: 150GB of free storage (250GB recommended for future growth)
		Operating system: 64-bit Linux (Ubuntu 18.04+, Mint 19.3+, Debian 10.3+)
		Broadband: a good network connection with about 1 GB of bandwidth per hour on a public IP4 address
		Air-gapped environment for key security
	
	For testnet pools, some requirements are smaller:

		Memory: 4GB of RAM
		Storage: 20GB of free storage
		Air-gapped environment not required
	

4) Link to download the Cardano Node
	
	Download and install the Cardano node software. You can obtain it from the official Cardano GitHub repository: 
	https://github.com/input-output-hk/cardano-node

5) How do I install a Cardano node ?

	Linux
		5.a) Installing Operating System dependencies
	
			To download the source code and build it, you need the following packages and tools on your Linux system:
				the version control system git,
				the gcc C-compiler,
				C++ support for gcc,
				developer libraries for the arbitrary precision library gmp,
				developer libraries for the compression library zlib,
				developer libraries for systemd,
				developer libraries for ncurses,
				ncurses compatibility libraries,
				the Haskell build tool cabal,
				the GHC Haskell compiler (version 8.10.7 or above).
				
			In Redhat, Fedora, and Centos:

				sudo yum update -y
				sudo yum install git gcc gcc-c++ tmux gmp-devel make tar xz wget zlib-devel libtool autoconf jq -y
				sudo yum install systemd-devel ncurses-devel ncurses-compat-libs -y
				
			For Debian/Ubuntu, use the following instead:
			
				sudo apt-get update -y && sudo apt-get upgrade -y
				sudo apt-get install automake build-essential pkg-config libffi-dev libgmp-dev libssl-dev libtinfo-dev libsystemd-dev zlib1g-dev make g++ tmux git jq wget libncursesw5 libtool autoconf -y

					If you are using a different flavor of Linux, you will need to use the correct package manager 
					for your platform instead of yum or apt-get, and the names of the packages you need to install might differ.

		5.b) Installing GHC and Cabal
		
			The fastest way to install GHC (Glasgow Haskell Compiler) and Cabal (Common Architecture for Building Applications and Libraries) is to use ghcup.

			Use the following command to install ghcup
				curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh
			
			Please follow the instructions and provide the necessary input to the installer.

				Do you want ghcup to automatically add the required PATH variable to "/home/ubuntu/.bashrc"? - (P or enter)

				Do you want to install haskell-language-server (HLS)? - (N or enter)

				Do you want to install stack? - (N or enter)

				Press ENTER to proceed or ctrl-c to abort. (enter)
				
			Once complete, you should have ghc and cabal installed to your system.
			
			You can check if ghcup has been installed correctly by typing ghcup --version into the terminal. You should see something similar to the following:
				The GHCup Haskell installer, version 0.1.19.2
				
			ghcup will install the latest stable version of ghc. we will use ghcup to install and switch to the required version.
				ghcup install ghc 8.10.7
				ghcup set ghc 8.10.7
		
			Finally, we check if we have the correct ghc and cabal versions installed. Check ghc version:
				ghc --version
				
				You should see something like this:
				The Glorious Glasgow Haskell Compilation System, version 8.10.7
			
			Check cabal version:
				cabal --version	
				
				You should see something like this:
				cabal-install version 3.6.2.0
				compiled using version 3.6.2.0 of the Cabal library
		
		5.c) Downloading & Compiling
			Let's create a working directory to store the source-code and builds for the components.

				mkdir -p $HOME/cardano-src
				cd $HOME/cardano-src
				
			Next, we will download, compile and install libsodium.

				git clone https://github.com/input-output-hk/libsodium
				cd libsodium
				git checkout dbb48cc
				./autogen.sh
				./configure
				make
				sudo make install
				
			Then we will add the following environment variables to your shell profile. 
			E.G $HOME/.zshrc or $HOME/.bashrc depending on what shell application you are using. 
			Add the following to the bottom of your shell profile/config file so that the compiler can be aware that libsodium is installed on your system.
			
				export LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH"
				export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH"

			Once saved, we will then reload your shell profile to use the new variables. 
			We can do that by typing source $HOME/.bashrc or source $HOME/.zshrc (depending on the shell application you use).

			We need to install secp256k1 which is required from cardano-node version 1.35.0 onward:

			Download and install libsecp256k1:
			
				cd $HOME/cardano-src
				git clone https://github.com/bitcoin-core/secp256k1
				cd secp256k1
				git checkout ac83be33
				./autogen.sh
				./configure --enable-module-schnorrsig --enable-experimental
				make
				make check
				sudo make install
				sudo ldconfig
			
			Now we are ready to download, compile and install cardano-node and cardano-cli. 
			But first, we have to make sure we are back at the root of our working directory:

				cd $HOME/cardano-src
			
			Download the cardano-node repository:

				git clone https://github.com/input-output-hk/cardano-node.git
				cd cardano-node
				git fetch --all --recurse-submodules --tags
			
			Switch the repository to the latest tagged commit:
				
				git checkout $(curl -s https://api.github.com/repos/input-output-hk/cardano-node/releases/latest | jq -r .tag_name)
			
		5.d) Configuring the build options
		
				We explicitly use the ghc version that we installed earlier. This avoids defaulting to a system version of ghc 
				that might be newer or older than the one you have installed.

					cabal configure --with-compiler=ghc-8.10.7

		5.c) Building and installing the node
				We can now build the Haskell-based cardano-node to produce executable binaries.

					cabal update
					cabal build all
			
				Install the newly built node and CLI commands to the $HOME/.local/bin directory:
				
					mkdir -p $HOME/.local/bin
					cp -p "$(./scripts/bin-path.sh cardano-node)" $HOME/.local/bin/
					cp -p "$(./scripts/bin-path.sh cardano-cli)" $HOME/.local/bin/
					
				We have to add this line below our shell profile so that the shell/terminal can recognize that 
				cardano-node and cardano-cli are global commands. ($HOME/.zshrc or $HOME/.bashrc depending on the shell application you use)

					export PATH="$HOME/.local/bin/:$PATH"

				Once saved, reload your shell profile by typing source $HOME/.zshrc or source $HOME/.bashrc (depending on the shell application you use).
				Check the version that has been installed:

					cardano-cli --version
					cardano-node --version

				Congratulations, you have successfully installed Cardano components into your Linux system!
				
	MacOS
		5.a) Installing Operating System dependencies
		
			To download the source code and build it, you need the following packages and tools on your MacOS system:
				Xcode - The Apple Development IDE and SDK/Tools
				Xcode Command Line Tools, you can install it by typing xcode-select --install in the terminal.
				Homebrew - The Missing Package Manager for MacOS (or Linux)
		
		5.b) Installing Homebrew packages
			
			For the cardano-node and cardano-cli components to compile properly, we will need to install some libraries via brew:

				brew install jq
				brew install libtool
				brew install autoconf
				brew install automake
				brew install pkg-config
				brew install openssl
			
			You will need to install llvm in case you are using M1
			
				brew install llvm@13
			
		5.c) Installing GHC and Cabal
			
			The fastest way to install GHC (Glassglow Haskell Compiler) and Cabal (Common Architecture for Building Applications and Libraries) is to use ghcup.

			Use the following command to install ghcup

				curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh

			Please follow the instructions and provide the necessary input to the installer.

				Do you want ghcup to automatically add the required PATH variable to "/home/ubuntu/.bashrc"? - (P or enter)

				Do you want to install haskell-language-server (HLS)? - (N or enter)

				Do you want to install stack? - (N or enter)

				Press ENTER to proceed or ctrl-c to abort. (enter)

			Once complete, you should have ghc and cabal installed to your system.
			
			You can check if ghcup has been installed properly by typing ghcup --version into the terminal. You should see something similar to the following:

				The GHCup Haskell installer, version v0.1.17.4
				
			ghcup will install the latest stable version of ghc. we will use ghcup to install and switch to the required version.
				ghcup install ghc 8.10.7
				ghcup set ghc 8.10.7
				
			ghcup will install the latest stable version of cabal. we will use ghcup to install and switch to the required version.
				ghcup install cabal 3.6.2.0
				ghcup set cabal 3.6.2.0
				
				
			Finally, we check if we have the correct ghc and cabal versions installed.
			Check ghc version:
				ghc --version

				You should see something like this:
				The Glorious Glasgow Haskell Compilation System, version 8.10.7

			Check cabal version:
				cabal --version
				
				You should see something like this:
				cabal-install version 3.6.2.0
				compiled using version 3.6.2.0 of the Cabal library
		
		5.d) Downloading & Compiling
			Let's create a working directory to store the source-code and builds for the components.

				mkdir -p $HOME/cardano-src
				cd $HOME/cardano-src

			Next, we will download, compile and install libsodium.

				git clone https://github.com/input-output-hk/libsodium
				cd libsodium
				git checkout dbb48cc
				./autogen.sh
				./configure
				make
				sudo make install
				
				
			Then we will add the following environment variables to your shell profile. 
			E.G $HOME/.zshrc or $HOME/.bashrc depending on what shell application you are using. 
			Add the following to the bottom of your shell profile/config file so the compiler can be aware that libsodium is installed on your system.

				export LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH"
				export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH"

			If you installed llvm for M1, then you will need to add this too, assuming that your exact llvm version is 13.0.1_2:

				export PATH="/opt/homebrew/Cellar/llvm@13/13.0.1_2/bin:$PATH"

			Once saved, we will then reload your shell profile to use the new variables. 
			We can do that by typing source $HOME/.bashrc or source $HOME/.zshrc (depending on the shell application you use).

			We need to install Secp256k1 which is required from 1.35.0 cardano-node version onward:

			Download and install libsecp256k1:

				cd $HOME/cardano-src
				git clone https://github.com/bitcoin-core/secp256k1
				cd secp256k1
				git checkout ac83be33
				./autogen.sh
				./configure --enable-module-schnorrsig --enable-experimental
				make
				make check
				sudo make install


			Now we are ready to download, compile and install cardano-node and cardano-cli. 
			But first, we have to make sure we are back at the root of our working directory:

				cd $HOME/cardano-src

			Download the cardano-node repository:

				git clone https://github.com/input-output-hk/cardano-node.git
				cd cardano-node
				git fetch --all --recurse-submodules --tag
			
			Switch the repository to the latest tagged commit:

				git checkout $(curl -s https://api.github.com/repos/input-output-hk/cardano-node/releases/latest | jq -r .tag_name)

		5.e) Configuring the build options
			We explicitly use the ghc version that we installed earlier. This avoids defaulting to a system version 
			of ghc that might be newer or older than the one you have installed.

				cabal configure --with-compiler=ghc-8.10.7

		5.f) Building and installing the node
			We can now build the Haskell-based cardano-node to produce executable binaries.

				cabal update
				cabal build all
				
			Install the newly built node and CLI commands to the $HOME/.local/bin directory:

				mkdir -p $HOME/.local/bin
				cp -p "$(./scripts/bin-path.sh cardano-node)" $HOME/.local/bin/
				cp -p "$(./scripts/bin-path.sh cardano-cli)" $HOME/.local/bin/
				
			We have to add this line below our shell profile so that the shell/terminal can recognize that cardano-node and cardano-cli are global commands. 
			($HOME/.zshrc or $HOME/.bashrc depending on the shell application you use)

				export PATH="$HOME/.local/bin/:$PATH"
				
			Once saved, reload your shell profile by typing source $HOME/.zshrc or source $HOME/.bashrc (depending on the shell application you use).

			Check the version that has been installed:

				cardano-cli --version
				cardano-node --version

			Congratulations, you have successfully installed Cardano components into your Linux system!

Stake pool activities:

1) registering a stake pool
cardano-cli stake-pool registration-certificate \
        --cold-verification-key-file cold.vkey \
        --vrf-verification-key-file vrf.vkey \
        --pool-pledge <AMOUNT TO PLEDGE IN LOVELACE> \
        --pool-cost <POOL COST PER EPOCH IN LOVELACE> \
        --pool-margin <POOL OPERATOR MARGIN > \
        --pool-reward-account-verification-key-file stake.vkey \
        --pool-owner-stake-verification-key-file stake.vkey \
        --testnet-magic 2 \
        --pool-relay-ipv4 <RELAY NODE PUBLIC IP> \
        --pool-relay-port <RELAY NODE PORT> \
        --single-host-pool-relay STRING <The stake pool relay's DNS name that corresponds to an A or AAAA DNS record> \
        --metadata-url https://git.io/JJWdJ \
        --metadata-hash <POOL METADATA HASH> \
        --out-file pool-registration.cert

        Example:

        cardano-cli stake-pool registration-certificate \
        --cold-verification-key-file cold.vkey \
        --vrf-verification-key-file vrf.vkey \
        --pool-pledge 500000000 \
        --pool-cost 340000000 \
        --pool-margin <POOL OPERATOR MARGIN > \
        --pool-reward-account-verification-key-file stake.vkey \
        --pool-owner-stake-verification-key-file stake.vkey \
        --testnet-magic 2 \
        --pool-relay-ipv4 <RELAY NODE PUBLIC IP> \
        --pool-relay-port <RELAY NODE PORT> \
        --single-host-pool-relay STRING <The stake pool relay's DNS name that corresponds to an A or AAAA DNS record> \
        --metadata-url https://git.io/JJWdJ \
        --metadata-hash <POOL METADATA HASH> \
        --out-file pool-registration.cert

2) Generating keys in the air-gapped machine
	2.1) payment.vkey - verification key
	2.2) payment.skey - signing key
	
		cardano-cli address key-gen \
		--verification-key-file payment.vkey \
		--signing-key-file payment.skey
	
	2.3) stake.vkey - verification key
	2.4) stake.skey - signing key

		cardano-cli stake-address key-gen \
		--verification-key-file stake.vkey \
		--signing-key-file stake.skey
	
	2.5.a) payment.addr - Payment address
	2.5.b) stake.addr - registered stake address
	
		cardano-cli address build \
		--payment-verification-key-file payment.vkey \
		--stake-verification-key-file stake.vkey \
		--testnet-magic 2 \
		--out-file payment.addr
	
	2.6) cold.vkey -  cold verification key
	2.7) cold.skey - cold signing key
	2.8) opcert.counter - operational certificate
	
		cardano-cli node key-gen \
		--cold-verification-key-file cold.vkey \
		--cold-signing-key-file cold.skey \
		--operational-certificate-issue-counter-file opcert.counter
	
	2.9) kes.vkey - KES verification key
	2.10) kes.skey - KES verification key
		
		cardano-cli node key-gen-KES \
		--verification-key-file kes.vkey \
		--signing-key-file kes.skey
	
	2.11) vrf.vkey - VRF verification key
	2.12) vrf.skey - VRF signing key
	
		cardano-cli node key-gen-VRF \
		--verification-key-file vrf.vkey \
		--signing-key-file vrf.skey

3) block-producing node 
	Upload keys to the block-producing node
	3.a) mkdir keys
	
	Use a USB drive to bring kes.skey vrf.skey and opcert.cert to your working machine and from there, upload:
	3.b) scp kes.skey vrf.skey opcert.cert username@host:/remote/directory

4) Registering a stake pool
	4.a) registration.cert
	
		cardano-cli stake-address registration-certificate \
		--stake-verification-key-file stake.vkey \
		--out-file registration.cert
		
	4.b) transaction build tx.raw
	
		cardano-cli transaction build \
		--testnet-magic 2 \
		--witness-override 2 \
		--tx-in $(cardano-cli query utxo --address $(cat payment.addr) --testnet-magic 2 --out-file  /dev/stdout | jq -r 'keys[0]') \
		--change-address $(cat payment.addr) \
		--certificate-file registration.cert \
		--out-file tx.raw
		
	4.c) transaction sign tx.signed
		
		cardano-cli transaction sign \
		--tx-body-file tx.raw \
		--signing-key-file payment.skey \
		--signing-key-file stake.skey \
		--testnet-magic 2 \
		--out-file tx.signed
		
	4.d) transaction submit (tx.signed)
	
		cardano-cli transaction submit \
		--testnet-magic 2 \
		--tx-file tx.signed 
	
5) Register your stake pool 
	5.a) Create a JSON file with metadata and store it in the node-
		JSON containing:
			Name of up to 50 characters
			Description of up to 255 characters
			Ticker of 3-5 characters
			Homepage with additional information about the pool
			All characters in the metadata will be UTF8 encoded
			No more than 512 bytes
			
		  {
		  "name": "TestPool",
		  "description": "The pool that tests all the pools",
		  "ticker": "TEST",
		  "homepage": "https://teststakepool.com"
		  }
		  
	5.b) Get the hash of your JSON file
		wget https://880w.short.gy/clrsp.json
		
		cardano-cli stake-pool metadata-hash --pool-metadata-file clrsp.json --out-file poolMetaDataHash.hash
		3c914463aa1cddb425fba48b21c4db31958ea7a30e077f756a82903f30e04905
		
	5.c) pool-registration.cert - registration certificate
	
		cardano-cli stake-pool registration-certificate \
		--cold-verification-key-file cold.vkey \
		--vrf-verification-key-file vrf.vkey \
		--pool-pledge 9000000000 \
		--pool-cost 340000000 \
		--pool-margin .05 \
		--pool-reward-account-verification-key-file stake.vkey \
		--pool-owner-stake-verification-key-file stake.vkey \
		--testnet-magic 2 \
		--pool-relay-ipv4 192.168.0.1 \
		--pool-relay-port 3000 \
		--metadata-url https://880w.short.gy/clrsp.json \
		--metadata-hash $(cat poolMetaDataHash.hash) \
		--out-file pool-registration.cert
		
	5.d) delegation.cert - delegation certificate
	
		cardano-cli stake-address delegation-certificate \
		--stake-verification-key-file stake.vkey \
		--cold-verification-key-file cold.vkey \
		--out-file delegation.cert
		
	5.e) Submit certificates 
			Build the transaction(pool-registration.cert)(delegation.cert)
				cardano-cli transaction build \
				--testnet-magic 2 \
				--witness-override 3 \
				--tx-in $(cardano-cli query utxo --address $(cat payment.addr) --testnet-magic 2 --out-file  /dev/stdout | jq -r 'keys[1]') \
				--change-address $(cat payment.addr) \
				--certificate-file pool-registration.cert \
				--certificate-file delegation.cert \
				--out-file tx.raw
			
			Sign the transaction - tx.signed
				cardano-cli transaction sign \
				--tx-body-file tx.raw \
				--signing-key-file payment.skey \
				--signing-key-file cold.skey \
				--signing-key-file stake.skey \
				--testnet-magic 2 \
				--out-file tx.signed
			
			Submit the transaction (tx.signed)
				cardano-cli transaction submit \
				--testnet-magic 2 \
				--tx-file tx.signed
	
	
	5.6) Get delegation funds from the testnet faucet
	
		cardano-cli stake-pool id \
		--cold-verification-key-file cold.vkey \
		--output-format bech32
		
	5.7) Issue an Operational certificate - opcert.cert
	
		cardano-cli query tip --testnet-magic 2
			>
			{
				"block": 552276,
				"epoch": 143,
				"era": "Babbage",
				"hash": "fe9c9b4b3f70262f60183bf0d8e72077c559345b22b47d4d4af91d4e5a4b5994",
				"slot": 12380321,
				"syncProgress": "100.00"
			}
	
		Divide:
			echo $((12380321 / 129600))
			95
			
		On the air-gapped machine, run:
			cardano-cli node issue-op-cert --kes-verification-key-file kes.vkey \
			--cold-signing-key-file cold.skey \ 
			--operational-certificate-issue-counter-file opcert.counter \
			--kes-period 95 \
			--out-file opcert.cert	
	
6) Running the nodes
	6.1) Prepare topology files
		This is a basic setup with x.x.x.x and y.y.y.y representing the IP addresses of the stake pool operator's relays:
		
		Block Producer:
		
		The Valency parameter determines the total number of connections to local roots. 
		For instance, if you want a hot connection with both x.x.x.x and y.y.y.y relays, set Valency to 2.
			
		UseLedgerAfterSlot is configured to be -1 to ensure that ledger peers are never utilized on the block producer.
		
			{
			   "localRoots":[
				  {
					 "accessPoints":[
						{
						   "address":"x.x.x.x",
						   "port":3000
						},
						{
						   "address":"y.y.y.y",
						   "port":3000
						}
					 ],
					 "advertise":false,
					 "valency":2
				  }
			   ],
			   "publicRoots":[
				  {
					 "accessPoints":[
						
					 ],
					 "advertise":false
				  }
			   ],
			   "useLedgerAfterSlot":-1
			}
			
		Example:
		
			nano configuration/topology.json	
			
			{
			   "localRoots":[
				  {
					 "accessPoints":[
						{
						   "address":"83.229.3.32",
						   "port":3000
						},
						{
						   "address":"194.113.195.206",
						   "port":3000
						}
					 ],
					 "advertise":false,
					 "valency":2
				  }
			   ],
			   "publicRoots":[
				  {
					 "accessPoints":[
						
					 ],
					 "advertise":false
				  }
			   ],
			   "useLedgerAfterSlot":-1
			}
		
	6.2) Relays: 
			a) Your relays will connect to the block producer z.z.z.z and to your other relay y.y.y.y.
			b) Use Valency 2 to tell the node to maintain a hot connection with both nodes.
			c) Here, you can use IOG relays (or any other trusted peer) under public roots
			d) Set useLedgerAfterSlot: 1000000. Make sure that the target slot is not too old, in particular, if syncing the chain for the first time.
			
			{
			   "localRoots":[
				  {
					 "accessPoints":[
						{
						   "address":"z.z.z.z",
						   "port":3000
						},
						{
						   "address":"y.y.y.y",
						   "port":3000
						}
					 ],
					 "advertise":false,
					 "valency":2
				  }
			   ],
			   "publicRoots":[
				  {
					 "accessPoints":[
						{
						   "address":"preview-node.world.dev.cardano.org",
						   "port":30002
						}         
					 ],
					 "advertise":false
				  }
			   ],
			   "useLedgerAfterSlot":1000000
			}
			
			Example: 
			
			{
			   "localRoots":[
				  {
					 "accessPoints":[
						{
						   "address":"199.19.75.18",
						   "port":3000
						},
						{
						   "address":"194.113.195.206",
						   "port":3000
						}
					 ],
					 "advertise":false,
					 "valency":2
				  }
			   ],
			   "publicRoots":[
				  {
					 "accessPoints":[
						{
						   "address":"preview-node.world.dev.cardano.org",
						   "port":30002
						}         
					 ],
					 "advertise":false
				  }
			   ],
			   "useLedgerAfterSlot":1000000
			}

			
	6.3) Prepare startup scripts 
	
		a) For the block producer and for the relays

		nano startnode.sh
	
			#!/bin/bash

			# Configuration variables
			TOPOLOGY_FILE="configuration/topology.json"
			CONFIG_FILE="configuration/config.json"
			DATABASE_PATH="db"
			SOCKET_PATH="socket/node.socket"
			KES_PATH="keys/kes.skey"
			VRF_PATH="keys/vrf.skey"
			OPCERT_PATH="keys/opcert.cert"
			HOST_ADDR="0.0.0.0"
			PORT="3000"

			cardano-node run \
				--topology "${TOPOLOGY_FILE}" \
				--database-path "${DATABASE_PATH}" \
				--socket-path "${SOCKET_PATH}" \
				--host-addr "${HOST_ADDR}" \
				--shelley-kes-key "${KES_PATH}"  \ 
				--shelley-vrf-key "${VRF_PATH}" \
				--shelley-operational-certificate "${OPCERT_PATH}" \
				--port "${PORT}" \
				--config "${CONFIG_FILE}" 
				
		b)For the relays:
	
		nano startnode.sh
	
			#!/bin/bash

			# Configuration variables
			TOPOLOGY_FILE="configuration/topology.json"
			CONFIG_FILE="configuration/config.json"
			DATABASE_PATH="db"
			SOCKET_PATH="socket/node.socket"
			HOST_ADDR="0.0.0.0"
			PORT="3000"

			cardano-node run \
				--topology "${TOPOLOGY_FILE}" \
				--database-path "${DATABASE_PATH}" \
				--socket-path "${SOCKET_PATH}" \
				--host-addr "${HOST_ADDR}" \
				--port "${PORT}" \
				--config "${CONFIG_FILE}"

 

	6.4) Set up the Cardano node to run as systemd service
		a) It will be useful to set your time zone to UTC:
		
			sudo timedatectl set-timezone UTC
			
		b) Create the cardano-node.service file. 
		
			sudo nano /etc/systemd/system/cardano-node.service
			
				# The Cardano node service (part of systemd)
				# file: /etc/systemd/system/cardano-node.service

				 [Unit]
				Description       = Cardano Node Service
				Wants             = network-online.target
				After             = network-online.target

				[Service]
				User=clr
				Type=simple
				WorkingDirectory=/home/clr
				ExecStart=/home/clr/startnode.sh
				KillSignal=SIGINT
				RestartKillSignal=SIGINT
				TimeoutStopSec=300
				LimitNOFILE=32768
				Restart=always
				RestartSec=5
				SyslogIdentifier=cardano-node

				 [Install]
				WantedBy          = multi-user.target
				
			To start Cardano Node as a service when the computer boots, type:
		
			sudo systemctl daemon-reload

			sudo systemctl enable cardano-node.service
		
			sudo systemctl start cardano-node.service
	
			
		c) Useful systemctl commands
		
	6.5) Use journalctl to inspect your node logs:
		
		Follow the logs in real-time:
		journalctl --unit=cardano-node --follow
		
		Show only the actual message (pure node logs) without any metadata from journalctl:
		journalctl --unit=cardano-node --follow --output=cat
		
		Filter logs from a specific date:
		journalctl --unit=cardano-node --since=today
		
		Delete old logs:
		sudo journalctl --vacuum-time=5d

7) Pool operations and maintenance
	7.1) Querying the stake snapshot
		
		The stake snapshot returns information about the mark, set, go ledger snapshots for a pool, 
		plus the total active stake for each snapshot that can be used in a 'sigma' calculation:
	
			cardano-cli stake-pool id \
			--cold-verification-key-file cold.vkey \
			--output-format bech32 >> pool.id
		
			Example:
			cardano-cli query stake-snapshot \
			--testnet-magic 2 \
			--stake-pool-id $(cat pool.id)
		
	7.2) Querying the leadership schedule
	
		You can calculate the leadership schedule for your stake pool with:
		Shelley genesis file, Stake pool ID & VRF signing key
		Specifying the --current flag will yield the leadership schedule for the current epoch as follows:
		
		cardano-cli query leadership-schedule \
		--testnet-magic 2 \
		--cold-verification-key-file cold.vkey \
		--genesis shelley-genesis.json \
		--vrf-signing-key-file vrf.skey \
		--current
		
		cardano-cli query leadership-schedule \
		--testnet-magic 2 \
		--cold-verification-key-file cold.vkey \
		--genesis shelley-genesis.json \
		--vrf-signing-key-file vrf.skey \
		--next

	7.3) Checking the validity of your KES keys
	
		cardano-cli query kes-period-info \
		--testnet-magic 2 \
		--op-cert-file opcert.cert
		
			✓ Operational certificate's KES period is within the correct KES period interval
			✓ The operational certificate counter agrees with the node protocol state counter
			{
				"qKesCurrentKesPeriod": 107,
				"qKesEndKesInterval": 166,
				"qKesKesKeyExpiry": null,
				"qKesMaxKESEvolutions": 62,
				"qKesNodeStateOperationalCertificateNumber": 2,
				"qKesOnDiskOperationalCertificateNumber": 2,
				"qKesRemainingSlotsInKesPeriod": 7632249,
				"qKesSlotsPerKesPeriod": 129600,
				"qKesStartKesInterval": 104
			}
	7.4) Renewing KES keys (kes.skey) and the operational certificate (opcert.cert)

			cardano-cli node key-gen-KES \
			--verification-key-file kes.vkey \
			--signing-key-file kes.skey
			
			cardano-cli node issue-op-cert --kes-verification-key-file kes.vkey \
			--cold-signing-key-file cold.skey \
			--operational-certificate-issue-counter-file opcert.counter \
			--kes-period 104 \
			--out-file opcert.cert
			
			Upload the new kes.skey and opcert.cert to your block-producing node.

	7.5) Withdrawing rewards - stake.addr

		Build the stake address:
		
			cardano-cli stake-address build \
			--testnet-magic 2 \
			--stake-verification-key-file stake.vkey \
			--out-file stake.addr
		
		Query its balance:
		
			cardano-cli query stake-address-info \
			--testnet-magic 2 \
			--address $(cat stake.addr)
			
		Example output:
			[
				{
					"address": "stake_test1urdflexy7e3uuflpvs0zycrc7zc8rtg9hguglvwq545j7mqf09vna",
					"delegation": "pool15r46gslrnhpe7ekvecfl895sm2pzhsxa8dhwh9ymgf06st3l86e",
					"rewardAccountBalance": 1834628277
				}
			]
			
		Build a transaction to withdraw rewards, use --witness-override 2. It will be signed by stake and payment keys:
		
			cardano-cli transaction build \
			--testnet-magic 2 \
			--witness-override 2 \
			--tx-in $(cardano-cli query utxo --address $(cat payment.addr) --testnet-magic 2 --out-file  /dev/stdout | jq -r 'keys[0]') \
			--withdrawal $(cat stake.addr)+1834628277 \
			--change-address $(cat payment.addr) \
			--out-file withdraw-tx.raw
			
		Or, use this more automatic approach:	
			
			cardano-cli transaction build \
			--testnet-magic 2 \
			--witness-override 2 \
			--tx-in $(cardano-cli query utxo --address $(cat payment.addr) --testnet-magic 2 --out-file  /dev/stdout | jq -r 'keys[0]') \
			--withdrawal $(cardano-cli query stake-address-info --testnet-magic 2 --address $(cat stake.addr) | jq -r '.[0].address + "+" + (.[0].rewardAccountBalance|tostring)') \
			--change-address $(cat payment.addr) \
			--out-file withdraw-tx.raw
		
		Sign transaction: 
		
			cardano-cli transaction sign \
			--tx-body-file withdraw_tx.raw  \
			--signing-key-file payment.skey \
			--signing-key-file stake.skey \
			--testnet-magic 2 \
			--out-file withdraw-tx.signed
		
		submit transaction:
		
			cardano-cli transaction submit \
			--tx-file withdraw-tx.signed \
			--testnet-magic 2

	7.6) Changing pool parameters:
	
		cardano-cli stake-pool registration-certificate \
		--testnet-magic 2 \
		--cold-verification-key-file cold.vkey \
		--vrf-verification-key-file vrf.vkey \
		--pool-pledge <AMOUNT TO PLEDGE IN LOVELACE> \
		--pool-cost <POOL COST PER EPOCH IN LOVELACE> \
		--pool-margin <POOL OPERATOR MARGIN > \
		--pool-reward-account-verification-key-file stake.vkey \
		--pool-owner-stake-verification-key-file stake.vkey \
		--pool-relay-ipv4 <RELAY NODE PUBLIC IP> \
		--pool-relay-port <RELAY NODE PORT> \
		--metadata-url <URL> \
		--metadata-hash <POOL METADATA HASH> \
		--out-file pool-registration.cert
		
		Example: 
		
		cardano-cli stake-pool registration-certificate \
		--cold-verification-key-file cold.vkey \
		--vrf-verification-key-file vrf.vkey \
		--pool-pledge 9000000000 \
		--pool-cost 340000000 \
		--pool-margin 10/100 \
		--pool-reward-account-verification-key-file stake.vkey \
		--pool-owner-stake-verification-key-file stake.vkey \
		--testnet-magic 2 \
		--pool-relay-ipv4 192.168.0.1 \
		--pool-relay-port 3000 \
		--pool-relay-ipv4 83.229.3.32\
		--pool-relay-port 3000\
		--metadata-url https://880w.short.gy/clrsp.json \
		--metadata-hash $(cat poolMetaDataHash.hash) \
		--out-file poolUpdate-registration.cert
		
		Submit pool-registration.cert in a transaction.
		On a machine with a running node:
	
		cardano-cli transaction build \
		--testnet-magic 2 \
		--tx-in $(cardano-cli query utxo --address $(cat payment.addr) --testnet-magic 2 --out-file  /dev/stdout | jq -r 'keys[0]') \
		--change-address $(cat payment.addr) \
		--witness-override 3 \
		--certificate-file poolUpdate-registration.cert \
		--out-file poolupdate-tx.raw

		Sign the poolupdate-tx.raw on your air-gapped machine:
		cardano-cli transaction sign \
		--testnet-magic 2 \
		--tx-body-file poolupdate-tx.raw \
		--signing-key-file payment.skey \
		--signing-key-file stake.skey \
		--signing-key-file cold.skey \
		--out-file poolupdate-tx.signed
	
		Back on the machine with the running node, poolupdate-tx.signed:
		cardano-cli transaction submit \
		--testnet-magic 2 \
		--tx-file poolupdate-tx.signed
		
		Our pool should be registered with new pool parameters in the next snapshot
		
8) Updating cardano-node and cardano-cli
	
	8.1) Building and uploading the binaries
		Start by building and uploading the new Cardano node and Cardano CLI binaries:
		
			Download or build the new versions. Download the static binaries from https://github.com/input-output-hk/cardano-node/releases 
			or clone the latest version of the Cardano node repository and compile the new versions of cardano-node and cardano-cli.
			
				git checkout tags/<tag>
				nix build .#hydraJobs.musl.cardano-node-linux
				cd result
				tar -xf cardano-node-x.x.x-linux.tar.gz
				cp ./cardano-node ./cardan0-cli ~/.local/bin/
		
	8.2) Database operations
		If a chain replay is required, follow these steps to sync the node and prepare the database:
		
			8.2a) Sync the new node. Start and fully sync the new node with the blockchain on a separate machine. 
					Ensure a clean shutdown of the node to preserve the integrity of the database.
					
			8.2b) Compress blockchain data. Once the new node has fully synced, compress the blockchain data into a tarball:
					tar -czvf db.tar.gz ./db
					
			8.3c) Calculate SHA-256 hash. Generate the SHA-256 hash for the tarball:
					sha256sum db.tar.gz > db.tar.gz.sha256
					
			8.3d) Transfer the database. Transfer the compressed blockchain data tarball, 
				  and the hash file to the ~/src directory on your block-producing server:
				  
					scp db.tar.gz <user>@<your_node_ip>:~/src/
					scp db.tar.gz.sha256 <user>@<your_node_ip>:~/src/
					
					Example:
					scp db.tar.gz Tobb@199.19.75.88:~/src/
					scp db.tar.gz.sha256 Tobb@199.19.75.88:~/src/
					
			8.3e) On the block-producing server, verify the SHA-256 hash of the transferred tarball:
					sha256sum -c db.tar.gz.sha256
					If the output says "cardano-db.tar.gz: OK", the file was transferred without corruption.
		
		8.3) Upload binaries and database, and restart the node
			Once the database and the new binaries are ready, you can replace the old ones and restart your node:
			
			8.3a) Shut down the node. Cleanly shut down your cardano-node service:
					sudo systemctl stop cardano-node.service
			
			8.3b) Back up the existing database:
					mv ./db ./dbbackup
			
			8.3c) Transfer the binaries: Transfer the new binaries to the block-producing server:
					scp ~/.local/bin/cardano-node Tobb@199.19.75.88:~/src/
					scp ~/.local/bin/cardnao-cli <user>@<your_node_ip>:~/src/ 
					
			8.3d) Back up the current binaries. Before replacing them, back up your current binaries:
					mv /usr/local/bin/cardano-node /usr/local/bin/cardano-node.bak
					mv /usr/local/bin/cardano-cli /usr/local/bin/cardano-cli.bak
					
			8.3e) Replace the binaries. Replace the current cardano-node and cardano-cli binaries with the new ones:
					cp ~/src/cardano-node /usr/local/bin/
					cp ~/src/cardano-cli /usr/local/bin/

			8.3f) Extract the new database. Navigate to ~/src/ and extract the database:
					tar -xzvf db.tar.gz -C ~/
					
			8.3g) Restart the node. Finally, restart the cardano-node service:
					sudo systemctl start cardano-node.service

9) Retiring a stake pool
	The pool deposit is refunded to the rewards address. 
	Do not de-register the stake address before you get the deposit back.
	
	
	Retiring a stake pool - pool-deregistration.cert
		
		cardano-cli stake-pool deregistration-certificate \
		--cold-verification-key-file cold.vkey \
		--epoch <future epoch> \
		--out-file pool-deregistration.cert
	
		Example:

		cardano-cli stake-pool deregistration-certificate \
		--cold-verification-key-file cold.vkey \
		--epoch 234 \
		--out-file pool-deregistration.cert
		
	transaction build
		cardano-cli transaction build \
		--testnet-magic 2 \
		--tx-in $(cardano-cli query utxo --address $(cat payment.addr) --testnet-magic 2 --out-file  /dev/stdout | jq -r 'keys[0]') \
		--change-address $(cat payment.addr) \
		--witness-override 2 \
		--certificate-file  pool-deregistration.cert \
		--out-file tx.raw
	
	transaction sign
		cardano-cli transaction sign \
		--testnet-magic 2 \
		--tx-body-file tx.raw \
		--signing-key-file payment.skey \
		--signing-key-file cold.skey \
		--out-file tx.retire.signed
		
	transaction submit
		cardano-cli transaction submit \
		--testnet-magic 2 \
		--tx-file tx.retire.signed
